<?xml version="1.0"?>
<!DOCTYPE document PUBLIC
          "-//Apache Software Foundation//DTD XDOC 1.0//EN"
          "http://maven.apache.org/dtd/xdoc_1_0.dtd" [
  <!ENTITY jsamp-usage SYSTEM
           "../../../target/docs/org.astrogrid.samp.JSamp.usage">
  <!ENTITY hubrunner-usage SYSTEM
           "../../../target/docs/org.astrogrid.samp.xmlrpc.HubRunner.usage">
  <!ENTITY hubmonitor-usage SYSTEM
           "../../../target/docs/org.astrogrid.samp.gui.HubMonitor.usage">
  <!ENTITY snooper-usage SYSTEM
           "../../../target/docs/org.astrogrid.samp.test.Snooper.usage">
  <!ENTITY messagesender-usage SYSTEM
           "../../../target/docs/org.astrogrid.samp.test.MessageSender.usage">
  <!ENTITY hubtester-usage SYSTEM
           "../../../target/docs/org.astrogrid.samp.test.HubTester.usage">
  <!ENTITY calcstorm-usage SYSTEM
           "../../../target/docs/org.astrogrid.samp.test.CalcStorm.usage">
]>
<document>

<properties>
  <title>Command-line Tools</title>
  <author email="m.b.taylor@bristol.ac.uk">Mark Taylor</author>
</properties>

<body>
<section name="Command-line Tools">

<p>JSAMP provides a number of command-line applications for standalone use
in various contexts.
These come with their own <code>main()</code> methods so can be invoked
directly.  A convenience class <code>org.astrogrid.samp.JSamp</code> is
also provided (with its own <code>main()</code> method) which might save
you a bit of typing when running these; if the dependencies are in the
same directory as the jsamp jar file itself, then the JSamp class 
can be invoked as 
"<code>java -jar jsamp-</code><em>version</em><code>.jar</code>".  
In all cases, supplying the "<code>-h</code>" or "<code>-help</code>" 
flag on the command line will print a usage message.
</p>

<p>The JSamp usage message says:
</p>
<source>&jsamp-usage;</source>

<p>The individual command-line applications are described below.
They have their own specific command-line flags to control use,
but most share the following common flags:
</p>
<dl>
<dt><code>-help</code></dt>
<dd>Outputs the usage message.
    May be abbreviated to <code>-h</code>.
    </dd>
<dt><code>-/+verbose</code></dt>
<dd>Increases/decreases verbosity.
    This controls what level of logging is performed by the application.
    By default, WARNING (and higher) messages are output, while
    INFO (and lower) messages are suppressed.  <code>-verbose</code>
    increases the verbosity by one level and <code>+verbose</code> decreases
    it by one level.  These flags may be supplied more than once.
    May be abbreviated to <code>-v</code> or <code>+v</code>.
    </dd>
<dt><code>-xmlrpc internal|apache|xml-log|rpc-log</code></dt>
<dd>Configures which pluggable XML-RPC implementation will be used for 
    XML-RPC communications.
    <dl>
    <dt><code>internal</code></dt>
    <dd>A free-standing implementation is used.  This requires no external
        libraries.
        </dd>
    <dt><code>apache</code></dt>
    <dd>The Apache XML-RPC library is used.  The apache-xmlrpc-1.2b classes
        must be on the classpath for this to work.
        </dd>
    <dt><code>xml-log</code></dt>
    <dd>Like <code>internal</code>, but all incoming and outgoing HTTP 
        communications are logged to standard output as raw XML.
        This is quite verbose and only likely to be suitable for 
        debugging purposes.
        </dd>
    <dt><code>rpc-log</code></dt>
    <dd>Like <code>internal</code>, but all incoming and outgoing XML-RPC
        messages are logged to standard output in terms of XML-RPC method names,
        parameter lists and responses.  This is still pretty verbose, but
        somewhat more readable than <code>xml-log</code>.
        </dd>
    </dl>
    The implementations ought to behave the same as far as communications go,
    though there may be performance differences (the logging ones will
    be slower for sure).
    The default is currently <code>internal</code>.
    </dd>
<dt><code>-gui/-nogui</code></dt>
<dd>Shows/hides a window which shows which clients are currently registered
    with the hub and their metadata and subscriptions.
    </dd>
</dl>
<p>
The GUI window, which is used by several of these tools to display 
the clients currently registered with the hub along with their
metadata and subscriptions, looks something like this:
</p>
<img src="HubMonitor.gif" alt="HubMonitor screenshot"/>


<subsection name="HubRunner">

<p>The <code>org.astrogrid.samp.xmlrpc.HubRunner</code> class runs a SAMP hub
using the SAMP Standard Profile.  A graphical window showing 
currently registered clients and their attributes (metadata and subscribed
MTypes) may optionally be displayed.
</p>

<p>HubRunner usage is:
</p>
<source>&hubrunner-usage;</source>
<dl>
<dt><code>-mode [no-gui|client-gui|msg-gui]</code></dt>
<dd>Determines what hub implementation is used; currently this affects
    whether and how the hub status is displayed graphically.
    The following options are available:
    <dl>
    <dt><code>no-gui</code></dt>
    <dd>There is no graphical display.
        </dd>
    <dt><code>client-gui</code></dt>
    <dd>A window is displayed showing which clients are registered and
        their metadata and subscriptions.
        </dd>
    <dt><code>msg-gui</code></dt>
    <dd>A window is displayed showing clients with metadata and subscriptions;
        it also gives a graphical representation of what messages are being
        sent and received between clients.  In the case of heavy messaging
        traffic, the extra processing required for this display can
        slow down hub operations a bit.
        </dd>
    </dl>
    In the case of the GUI options, they pop up a window when the hub starts;
    if the window is closed, the hub will shut down.
    </dd>
</dl>

</subsection>

<subsection name="HubMonitor">

<p>The <code>org.astrogrid.samp.gui.HubMonitor</code> class 
runs a SAMP client which connects to any available hub and displays
a window showing currently registered clients along with their 
attributes (metadata and subscribed MTypes).
If no hub is available at startup, or the hub shuts down while the monitor
is running, the monitor will poll for a hub at regular intervals and 
reconnect if a new one starts up.
</p>

<p>A button at the bottom of the window allows you to disconnect from
a running hub or to reconnect.  While disconnected, no automatic connection
attempts are made.
</p>

<p>The <code>HubMonitor</code> class itself is a very simple application
which uses the facilities provided by the other classes in the toolkit.
See the source code for details.
</p>

<p>HubMonitor usage is:
</p>
<source>&hubmonitor-usage;</source>
<dl>
<dt><code>-/+verbose</code></dt>
<dd>See above for the description of verbosity setting.
    If <code>-verbose</code> is used, each message sent and received will
    be logged to standard error through the logging system.
    </dd>
<dt><code>-auto &lt;secs&gt;</code></dt>
<dd>Sets the number of seconds between reconnection attempts when the
    monitor is inactive but unregistered.  
    If &lt;=0, autoconnection is not attempted.
    </dd>
<dt><code>-nogui</code></dt>
<dd>The monitor registers as a client, but no window is displayed.
    </dd>
<dt><code>-nomsg</code></dt>
<dd>Normally the window displays an indication of pending messages sent
    and received by the monitor itself.  If the <code>-nomsg</code>
    flag is given, these will not be shown.
    </dd>
</dl>

</subsection>

<subsection name="Snooper">

<p>The <code>org.astrogrid.samp.test.Snooper</code> class
runs a SAMP client which subscribes to some or all MTypes and logs
each message it receives to the terminal.
This can be useful for debugging, especially for testing whether your
application is sending messages which look right.
Since it does not actually understand the messages which have been
sent, it sends a Response with 
<code>samp.status</code>=<code>samp.warning</code>.
</p>

<p>Snooper usage is:
</p>
<source>&snooper-usage;</source>
<dl>
<dt><code>-mtypes &lt;pattern&gt;</code></dt>
<dd>Gives an MType or wildcarded MType to subscribe to.
    This flag may be repeated to subscribe to several different MType patterns.
    If omitted, a value of "<code>*</code>", i.e. subscription to all MTypes,
    will be assumed.
    </dd>
</dl>

</subsection>

<subsection name="MessageSender">

<p>The <code>org.astrogrid.samp.test.MessageSender</code> class
can send a simple SAMP message from the command line and display 
any responses received in response.
</p>

<p>MessageSender usage is:
</p>
<source>&messagesender-usage;</source>
<dl>
<dt><code>-mtype &lt;mtype&gt;</code></dt>
<dd>Gives the MType for the message to send.
    </dd>
<dt><code>-param &lt;name&gt; &lt;value&gt;</code></dt>
<dd>Gives a named parameter for the message.
    This flag may be repeated to pass more than one parameter.
    Currently <code>&lt;value&gt;</code> is simply interpreted as a string
    value, so it is impossible to send SAMP <code>list</code>- or 
    <code>map</code>-valued parameters.
    This may be rectified in a future release.
    </dd>
<dt><code>-target &lt;receiverId&gt;</code></dt>
<dd>Specifies the SAMP public ID for a client to which this message will be
    sent.  This flag may be repeated to send the same messsage to more than
    one recipient.  If omitted, the message is <em>broadcast</em> to all
    clients which are subscribed to the MType.
    </dd>
<dt><code>-mode sync|async|notify</code></dt>
<dd>Specifies the delivery pattern to be used to send the message.
    In the case of <code>notify</code>, no responses will be received.
    The sender only declares itself <em>callable</em> if <code>async</code>
    mode is used.
    The default is <code>sync</code>.
    </dd>
<dt><code>-sendername &lt;appname&gt;</code></dt>
<dd>Specifies the <code>samp.name</code> metadata item which the sending
    aplication should give for its application name following registration.
    </dd>
<dt><code>-sendermeta &lt;metaname&gt; &lt;metavalue&gt;</code></dt>
<dd>Specifies additional items of metadata for the sending application to
    give following registration.
    </dd>
</dl>

</subsection>

<subsection name="HubTester">

<p>The <code>org.astrogrid.samp.test.HubTester</code> class
runs a series of tests on an existing SAMP hub.
Most aspects of hub operation are tested, along with some moderate
load testing.
In case of a test failure, an exception will be thrown, and under normal
circumstances the stackdump will be shown on standard error.
These exceptions may not be particularly informative;
hub authors debugging hubs will have to examine the HubTester source
code to see what was was being attempted when the failure occurred.
</p>

<p>Normally, if a hub passes all the tests there will be no output to
standard output or standard error.
Under some circumstances however a WARNING log message will be output.
This corresponds to behaviour that a hub implementation SHOULD,
but not MUST, display according to the SAMP standard.
</p>

<p>It's OK for other clients to be registered while the test runs,
but such clients should not either register or unregister while the
test is under way - this will confuse the test and probably result in
spurious test failures.
</p>

<p>HubTester usage is:
</p>
<source>&hubtester-usage;</source>
<dl>
<dt><code>-gui</code></dt>
<dd>If supplied, a HubMonitor window will be shown for the duration of the test.
    </dd>
</dl>

</subsection>

<subsection name="CalcStorm">

<p>The <code>org.astrogrid.samp.test.CalcStorm</code> class
runs a number of clients simultaneously, which all connect to the
hub and then send each other messages.  A private set of MTypes
which provide simple integer arithmetic are used.
Checks are made that all the expected responses are obtained and have
the correct content.
On termination, a short message indicating the number of messages sent
and how long they took is output.
This application can therefore be used as a load test and/or benchmark
for a given hub implementation.
</p>

<p>CalcStorm usage is:
</p>
<source>&calcstorm-usage;</source>
<dl>
<dt><code>-nclient &lt;n&gt;</code></dt>
<dd>Gives the number of clients which will run at once.
    </dd>
<dt><code>-nquery &lt;n&gt;</code></dt>
<dd>Gives the number of queries which each client will send to other clients
    during the run.
    </dd>
<dt><code>-mode sync|async|notify|random</code></dt>
<dd>Specifies the delivery pattern by which messages are sent.
    The default is <code>random</code>, which means that a mixture of modes
    (approximately a third each of synchronous call/response, 
    asynchronous call/response and notification) will be used.
    </dd>
<dt><code>-gui</code></dt>
<dd>If supplied, a HubMonitor window will be shown for the duration of the test.
    </dd>
</dl>

</subsection>

</section>

</body>

</document>
